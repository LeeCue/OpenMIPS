//********************   全局的宏定义   ********************                          
`define RstEnable         1'b1				//复位信号有效
`define RstDisable        1'b0				//复位信号无效
`define ZeroWord	  	  32'h00000000		//32位的数值0
`define WriteEnable	      1'b1				//使能写
`define WriteDisable	  1'b0				//禁止写
`define ReadEnable 	      1'b1				//使能读
`define ReadDisable 	  1'b0				//禁止读
`define AluOpBus	      1:0				//译码阶段的输出AluOp_o的宽度
`define AluSelBus	      3:0				//执行阶段的输出AluSel_o的宽度
`define InstValid	      1'b0				//指令有效
`define InstInvalid 	  1'b1				//指令无效
`define True_v		      1'b0				//逻辑'真'
`define False_v		      1'b0				//逻辑'假'
`define ChipEnable	      1'b1				//芯片使能
`define ChipDisable	      1'b0				//芯片禁止


//**************   与具体指令有关的宏定义   ****************
`define	EXE_R_type	      6'b000001			//R_type的指令码
`define EXE_lw_m	  	  6'b000010			//lw_m指令的指令码
`define	EXE_lw_io		  6'b000011			//lw_io指令的指令码
`define EXE_sw_m		  6'b000111			//sw_m指令的指令码
`define EXE_sw_io		  6'b001011			//sw_io指令的指令码
`define EXE_beq			  6'b000100			//beq指令的指令码
`define EXE_j			  6'b000101			//j指令的指令码
`define EXE_NOP		      6'b000000			//nop指令的指令码

`define EXE_ADD			  6'b100001			//add指令的功能码
`define EXE_SUB			  6'b100010			//sub指令的功能码
`define EXE_OR			  6'b100011			//or指令的功能码
`define EXE_AND			  6'b100100			//and指令的功能码
`define EXE_SLT			  6'b100101			//slt指令的功能码


//AluOp
`define EXE_ls_op		  2'b00				//表示lw_m , lw_io , sw_m , sw_io指令
`define EXE_arithmetic_op 2'b10				//表示R-type类型的指令
`define EXE_beq_op		  2'b01				//表示beq指令
`define EXE_nop_op		  2'b11				//表示nop指令

//AluSel
`define EXE_AND_sel	      4'b0000			//与
`define EXE_OR_sel	      4'b0001			//或
`define EXE_ADD_sel	      4'b0010			//加
`define EXE_SUB_sel	      4'b0110			//减
`define EXE_SLT_sel	      4'b0111			//条件设置
`define EXE_NOP_sel		  4'b1111			//无操作


//************   与指令存储器ROM有关的宏定义   **************
`define InstAddrBus	  	  31:0				//ROM的地址总线宽度
`define InstBus		      31:0				//ROM的数据总线宽度
`define InstMemNum	      131071			//ROM的实际大小128KB
`define InstMemNumLog2	  17         	    //ROM的实际使用的地址线宽度


//************   与通用寄存器Regfile有关的宏定义   **************
`define RegAddrBus	      4:0				//Regfile模块的地址线宽度
`define RegBus		      31:0				//Regfile模块的数据线宽度
`define Regwidth	      32				//通用寄存器的宽度
`define DoubleRegWidth	  64				//两倍的通用寄存器的宽度
`define DoubleRegBus	  63:0				//两倍的通用寄存器的数据线的宽度
`define RegNum		      32				//通用寄存器的数量
`define	RegNumLog2	      5					//寻址通用寄存器使用的地址位数
`define NOPRegAddr	      5'b00000


//************   与通用寄存器Regfile有关的宏定义   **************
`define DataAddrBus		  31:0				//地址总线宽度
`define	DataBus			  31:0				//数据总线宽度
`define	DataMemNum		  131071			//RAM的大小，单位是字，此处是128K word
`define DataMemNumLog2	  17				//实际使用的地址宽度
`define	ByteWidth		  7:0				//一个字宽度，8bit


//************   与转移指令有关的宏定义 		  **************
`define	Branch			  1'b1				//转移
`define	NotBranch		  1'b0				//不转移


//************   与IO单元有关的宏定义	 		  **************
`define In				  1'b1				//表示需要从IN单元读取数据
`define	NotIn			  1'b0				//表示不需要从IN单元读取数据
`define	Out				  1'b1				//表示需要将数据输出到OUT单元
`define	NotOut			  1'b0				//表示不需要将数据输出到OUT单元

//************   与流水线暂停有关的宏定义	 	  **************
`define	Stop			  1'b1				//流水线暂停
`define	NoStop			  1'b0				//流水线继续